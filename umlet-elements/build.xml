<?xml version="1.0"?>
<project name="BaseletElements" basedir="." default="javacc_all">

	<property name="elements.src.dir" location="src/main/java" />
	
	<!-- Custrom drawing -->
	<property name="custdraw.grammar.folder" location="${elements.src.dir}/com/baselet/element/facet/customdrawings/" />
	<property name="custdraw.grammar.name" value="CustomDrawingParser" />
	<property name="custdraw.grammar.file" value="CustomDrawingParser.jj" />
	<property name="custdraw.grammar.path" location="${javacc.grammar.folder}/${javacc.grammar.file}" />
	<property name="custdraw.grammar.output.folder" location="${elements.src.dir}/com/baselet/element/facet/customdrawings/gen/" />
	
	<!-- Sequence diagram all in one -->
	<property name="seqaio.grammar.folder" location="${elements.src.dir}/com/baselet/element/facet/specific/sequence_aio" />
	<property name="seqaio.grammar.name" value="SequenceAllInOneParser" />
	<property name="seqaio.grammar.file" value="SequenceAllInOneParser.jj" />
	<property name="seqaio.grammar.path" location="${javacc.grammar.folder}/${javacc.grammar.file}" />
	<property name="seqaio.grammar.output.folder" location="${elements.src.dir}/com/baselet/element/facet/specific/sequence_aio/gen/" />
	
	<!-- This folder must contain the javacc.jar minimum  6.1 for GWT compatibility (http://consoliii.blogspot.co.at/2014/04/creating-gwt-compatible-parser-using.html)-->
	<!-- JavaCC can be obtained here https://java.net/projects/javacc/downloads -->
	<property name="javacc.home" location="../javacc_distribution" />

	<!-- Generall JavaCC and JJDoc Targets -->
	<target name="javacc_all" description="For each grammar file the java classes, which describe a parser, will be created">
		<antcall target="javacc_generic">
			<param name="javacc.grammar.file" value="${custdraw.grammar.folder}/${custdraw.grammar.name}.jj"/>
			<param name="javacc.grammar.output.folder" value="${custdraw.grammar.output.folder}"/>
			<param name="javacc.grammar.name" value="${custdraw.grammar.name}"/>
		</antcall>
		<antcall target="javacc_generic">
			<param name="javacc.grammar.file" value="${seqaio.grammar.folder}/${seqaio.grammar.name}.jj"/>
			<param name="javacc.grammar.output.folder" value="${seqaio.grammar.output.folder}"/>
			<param name="javacc.grammar.name" value="${seqaio.grammar.name}"/>
		</antcall>
	</target>
	
	<target name="jjdoc_all" description="Generates a simple BNF documentation for each grammar file">
		<antcall target="jjdoc_generic">
			<param name="javacc.grammar.file" value="${custdraw.grammar.folder}/${custdraw.grammar.name}.jj"/>
			<param name="javacc.grammar.output.folder" value="${custdraw.grammar.output.folder}"/>
			<param name="javacc.grammar.name" value="${custdraw.grammar.name}"/>
		</antcall>
		<antcall target="jjdoc_generic">
			<param name="javacc.grammar.file" value="${seqaio.grammar.folder}/${seqaio.grammar.name}.jj"/>
			<param name="javacc.grammar.output.folder" value="${seqaio.grammar.output.folder}"/>
			<param name="javacc.grammar.name" value="${seqaio.grammar.name}"/>
		</antcall>
	</target>
	
	<target name="clean" description="Deletes all generated files for each grammar file" depends="javacc_clean_all,jjdoc_clean_all"></target>
	
	<target name="javacc_clean_all" description="Deletes all generated class files for each grammar file">
		<antcall target="javacc_generic_clean">
			<param name="javacc.grammar.output.folder" value="${custdraw.grammar.output.folder}"/>
			<param name="javacc.grammar.name" value="${custdraw.grammar.name}"/>
		</antcall>
		<antcall target="javacc_generic_clean">
			<param name="javacc.grammar.output.folder" value="${seqaio.grammar.output.folder}"/>
			<param name="javacc.grammar.name" value="${seqaio.grammar.name}"/>
		</antcall>
	</target>
	
	<target name="jjdoc_clean_all" description="Deletes all generated documentation files for each grammar file">
		<antcall target="jjdoc_generic_clean">
			<param name="javacc.grammar.output.folder" value="${custdraw.grammar.output.folder}"/>
			<param name="javacc.grammar.name" value="${custdraw.grammar.name}"/>
		</antcall>
		<antcall target="jjdoc_generic_clean">
			<param name="javacc.grammar.output.folder" value="${seqaio.grammar.output.folder}"/>
			<param name="javacc.grammar.name" value="${seqaio.grammar.name}"/>
		</antcall>
	</target>
	
	
	<!-- Targets for the different grammars -->
	<target name="javacc_generic" description="Generates the java classes from the grammar file">
		<javacc target="${javacc.grammar.file}" javacchome="${javacc.home}" outputdirectory="${javacc.grammar.output.folder}" />
	</target>
	
	<target name="jjdoc_generic" description="Generates a simple BNF documentation for the grammar file">
		<jjdoc target="${javacc.grammar.file}" javacchome="${javacc.home}" outputfile="${javacc.grammar.output.folder}/${javacc.grammar.name}.html"  text="false"/>
	</target>
	
	<target name="javacc_generic_clean" description="Deletes the files which are generated by JavaCC.">
		<delete file="${javacc.grammar.output.folder}/${javacc.grammar.name}.java" failonerror="false"/>
		<delete file="${javacc.grammar.output.folder}/${javacc.grammar.name}Constants.java" failonerror="false"/>
		<delete file="${javacc.grammar.output.folder}/${javacc.grammar.name}TokenManager.java" failonerror="false"/>
		<delete file="${javacc.grammar.output.folder}/JavaCharStream.java" failonerror="false"/>
		<delete file="${javacc.grammar.output.folder}/ParseException.java" failonerror="false"/>
		<delete file="${javacc.grammar.output.folder}/Provider.java" failonerror="false"/>
		<delete file="${javacc.grammar.output.folder}/StreamProvider.java" failonerror="false"/>
		<delete file="${javacc.grammar.output.folder}/StringProvider.java" failonerror="false"/>
		<delete file="${javacc.grammar.output.folder}/Token.java" failonerror="false"/>
		<delete file="${javacc.grammar.output.folder}/TokenMgrException.java" failonerror="false"/>
	</target>
	
	<target name="jjdoc_generic_clean" description="Deletes the files which are generated by JJDoc.">
		<delete file="${javacc.grammar.output.folder}/${javacc.grammar.name}.html" failonerror="false"/>
	</target>
	
</project>